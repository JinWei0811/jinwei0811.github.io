[ { "title": "Chrome Extension V3 - Json檔案介紹(1)", "url": "/posts/manifest/", "categories": "Chrome Extension", "tags": "Chrome Extension, Chrome Extension V3", "date": "2022-06-20 23:45:00 +0800", "snippet": "需備知識 Chrome Extension引言當今的Chrome Extension都是基於 Manifest V2 版本，但 Google 將更新至 Manifest V3，據說 V3 比 V2 版本提供更多的安全性、隱私性，以及提高性能。因為我本身也有一款1000+使用者的Chrome擴充應用程式，故需要將版本提升，也要改變其中的程式寫法。具 Google Dvelopers 所說 2023年1月 將停止接受關於 Manifest V2版本的更新，在 2023年6月 將不再支援 V2 版本。在學習 Manifest V3 的過程中，想說可以把看到、了解的分享出來，供以後的自己、別人參考。Manifest V3每一個 Chrome Extension 都有屬於自己的 manifest.json，這篇主要剖析、解釋其中每個項目代表的意思。這是 Google Developers 中提供的部分 manifest.json 範例檔。{ // Required \"manifest_version\": 3, \"name\": \"My Extension\", \"version\": \"versionString\", // Recommended \"action\": {...}, \"default_locale\": \"en\", \"description\": \"A plain text description\", \"icons\": {...},}Require(必填項目) manifest_version這邊只能填入 2 或 3 ，填入不同數字 Chrome 會提供不同的功能，這邊基本上建議填入3(因為 V2 即將淘汰) namename最多填入45個字元，他會顯示在三個地方 安裝時出現的對話框 Chrome 擴充管理的介面 Chrome 擴充應用商店 version這代表此款 Chrome Extension 的版本，最多可以包4個用 . 隔開的數字，且數字必須介於 0-65535 之間。版本號的範例： “version” : “1” “version” : “1.0” “version” : “2.10.2” “version” : “3.1.2.4567” 版本號是提供 Chrome擴充應用商店 去檢查是否有更新版本，如果有發布更新的版本，他就會自動更新。 Recommended(建議項目) actionaction 主要是控制在 Chrome 上你的擴充應用的 UI圖示。這個 UI圖示 通常會顯示在你的瀏覽器工具列(右上角拼圖裡)，就算你沒設定 action 也會在 Chrome瀏覽器 的工具列中顯示(可能會比較不精緻)。Google Developer所提供的 action 範例：{ \"name\": \"Action Extension\", \"action\": { \"default_icon\": { // optional \"16\": \"images/icon16.png\", // optional \"24\": \"images/icon24.png\", // optional \"32\": \"images/icon32.png\" // optional }, \"default_title\": \"Click Me\", // optional, shown in tooltip \"default_popup\": \"popup.html\" // optional },} action中所提供的項目： default_icon雖然在外面就可以設定擴充應用的 icon ，但可能因為不同的解析度，導致你的擴充應用 icon 圖像比例跟原本的不同，所以 Google Developer 建議提供更多的 icon 解析度，以便去應對不同的狀況。只要格式是 PNG、JPEG、BMP、ICO 都可以支援。 Tooltip(title)當使用者將滑鼠指標放到你的 Chrome擴充應用 上面時，會顯示出的標題。 Badge在你 Chrome擴充應用 上加入一些文字（有點像徽章），這可以額外寫是一些訊息比如說是訊息數量(99+)或是計數器之類的。 Popup主要跟使用者的互動就集中在這個選項上面，當使用者點擊你的擴充應用的時候，就會跳出一個HTML畫面。彈出的畫面不可以小於25x25，也不可大於800x600。 action中提供很多的功能，建議如果要做擴充應用的功能多讀讀裡面的功能，可能會對你的 Chrome擴充應用程式有幫助。 default_locale默認使用的語言環境，如果是台灣使用繁體中文應該是：zh-tw description這是提供作者對於此款擴充應用的描述（純粹文字格式不可超過132個字元），會顯示在 Chrome擴充應用商店 中，可依照你的需要決定是否添加。 icons設定 Chrome擴充應用程式 顯示的 icon，為了要顯示在 Chrome擴充應用商店、Chrome應用程式管理介面 你需要提供兩種解析度的icon（128x128, 48x48）。 icon建議使用PNG格式（因為PNG的半透明特性），但你也可以上傳BMP, GIF, ICO, JPEG格式，Chrome皆支援以上格式。 提供一個 icon在 manifest.json 中的範例： \"icons\": { \"16\": \"icon16.png\", \"32\": \"icon32.png\", \"48\": \"icon48.png\", \"128\": \"icon128.png\" }先介紹到這邊，其餘的部分留到下回繼續介紹！" }, { "title": "Twitch Bot圖奇機器人(4)-查詢Twitch API", "url": "/posts/TwitchAPI/", "categories": "Twitch Bot, Twitch API", "tags": "node.js, twitch api, fetch", "date": "2022-06-20 23:05:00 +0800", "snippet": "須備知識、工具 Visual Studio Code Javascript語法（fetch, json） 已搭建完成機器人執行環境可參考Twitch API 介紹Twitch Api是 twitch所提供的服務，可以做一些簡單的查詢，在這個網頁中有提供所有可利用Twitch API做到的功能。Twitch API是RESTful API的形式，在這篇文章中會用到fetch的方式去呼叫，然後再轉成 Json 的格式去取得我們想取得的值。其中我認為比較有用的功能 Get Users 取得使用者資訊 Get Followed Streams 取得使用者追隨頻道資訊 Get Users Follows 取得使用者追隨特定頻道資訊取得 Twitch 金鑰發Twitch API需要先獲得憑證（OUATH) Client-ID Authorization這邊提供一個別人所提供的服務來取得Twitch憑證 進去之後先選擇為 Bot Chat Token 給予Twitch授權 往下滑有個表格標頭為 Generated Tokens其中 ACCESS TOKEN 就是你的 Authorization , CLIENT ID就是你的 Client-ID ，把這兩串文字記好待會會用到。呼叫Twitch API既然已經取得 Authorization 、 Client-ID 就可以來嘗試呼叫Twitch API。（以下皆用Get Users當作範例） 首先設定一個Heade參數，放入剛才取得的授權憑證。將 &lt;your Authorization&gt; 替換成你的 Authorization，Client-ID同理。let headers = { Authorization: 'Bearer &lt;your Authorization&gt;', Client-Id: '&lt;your Client-ID&gt;',}; 呼叫Twitch API，user_name 就是你要查詢的使用者的 Twitch 英文ID。假設我Twitch顯示的名稱是 浣熊機器人 (raccattack_bot) 那麼要輸入的user_name 應該是 raccattack_bot。這串程式碼主要意思是，利用GET的方式並且放入headrs來呼叫Twitch API，將從Twitch取回來的資料轉成Json格式，再將它印出來。fetch(`https://api.twitch.tv/helix/users?login=${user_name}`, { method: \"GET\", headers: headers, }) .then((response) =&gt; response.json()) .then((result) =&gt; { console.log(result) });以 浣熊機器人(raccattack_bot) 為例，當我在 user_name 填入 raccattack_bot，從Twitch取回來的資料(result)如下：這就是一個標準的Json格式，假設我要 id 這項的值，只需要呼叫 result.data[0].id 就可取得。基本上到這邊應該都可以做到Twitch API的呼叫了，呼叫API只是第一步，將取得回來的JSON檔加工成我們要的內容在輸出，這部分就依自己的需求去做呈現，就不多加贅述了。{ data: [ { id: '87572734', login: 'raccattack_bot', display_name: '浣熊機器人', type: '', broadcaster_type: '', description: '', profile_image_url: 'https://static-cdn.jtvnw.net/user-default-pictures-uv/294c98b5-e34d-42cd-a8f0-140b72fba9b0-profile_image-300x300.png', offline_image_url: '', view_count: 166, created_at: '2015-04-05T09:23:57Z' } ]}如果有遇到任何的問題歡迎在下面留言，或者寄信給我交流討論～" }, { "title": "Twitch Bot 圖奇機器人(3)-部署至Glitch", "url": "/posts/TwitchBot_3/", "categories": "Twith Bot, Glitch", "tags": "node.js, twitch bot, javascript, glitch", "date": "2022-05-24 23:28:00 +0800", "snippet": "需備知識、工具 Glitch 帳號(可用Facebook、Github、Google帳號登入) Javascript 基本語法 已搭建完成機器人執行環境可參考Glitch稍微介紹一下Glitch，Glitch是一款很棒的線上工具，可以把很多東西都部署到上面。這邊截取一段官網的介紹「Glitch is the friendly place where everyone builds the web. Start a new blog, play with React, or build new worlds with WebXR.」，所以我們也可以把我們的Twitch發言機器人部署至上面，讓我們不用開機機器人也可以工作。但部署到Glitch有幾點要注意： 伺服器只要5分鐘內沒有觸發就會休眠(可用Call API的方式觸發) 伺服器每12小時就會被關閉一次（需要手動打開） 每個月有免費時數1000小時將機器人部署上Glitch 首先可以先參考去複製已存在的範例專案。首先登入Glitch，再進去範例專案點擊右上角Remix。這時候需要讓Glitch執行一陣子，當執行完成會跳出README.MD的畫面。點擊左上角Glitch，會在Projects裡看到你正在執行的專案。0小時的那個專案就是此次新建的專案。 這時候再回到專案裡面，首先要進到Environment裡設定你Twitch帳號的相關認證。在 USERNAME 填入說話機器人的帳號在 PASSWORD 輸入從twitch取回的 oauth:my_bot_token(可參考第一篇文章第5點) 當一切設定好後點擊下方Log，則可以看到機器人人已成功連結至Twitch聊天室。 設定呼叫API點擊畫面左邊的 index.json 到輸入機器人指令的地方，將程式碼拉到最下面新增Function。這個Function就是設定一個RestAPI，當被呼叫的時候就會印出i'm awake 以及回傳 i'm awake 。 app.get(\"/wakeup\", function (request, response) { console.log(\"i'm awake\"); response.send(\"i'm awake\");}); 設定每4.5分鐘呼叫一次Glitch非常有趣，可以自己呼叫自己XD，所以當我們成功添加上面的Function，只要每5分鐘內呼叫一次，這樣子伺服器就不會休眠。在剛才新增的Function下面新增Function，其中https://xxxxx-xxxxx-xxxxx.glitch.me 需要置換成你自己專案的URL，最快的取得方式是，直接點擊CopyLink，覆蓋掉就可以了。（如果預覽視窗沒有出現，也可以點擊下方的Preview叫出預覽視窗)setInterval(() =&gt; { fetch(\"https://xxxxx-xxxxx-xxxxx.glitch.me/wakeup\", { method: \"GET\", });}, 270000);注意事項 記得設定channels 將他指到機器人要加入的聊天室。 如果有用到其他 node.js module 請先至 package.json 新增，並在Terminal輸入 npm install 要新增機器人執行指令請加在 index.json 裡面。到這邊應該可以成功的將機器人部署到Glitch上了，只要記得12小時內開一次Glitch專案的網頁，就可以重新連上去，可以開始設定你的機器人了！" }, { "title": "Twitch Bot 圖奇機器人(2)-基礎Javascript語法", "url": "/posts/TwitchBot_2/", "categories": "Twith Bot", "tags": "node.js, twitch bot, javascript", "date": "2022-05-09 21:32:00 +0800", "snippet": "需備知識、工具 Visual Studio Code Javascript 基本語法 已搭建完成機器人執行環境可參考運行環境： MacOs Big Sur 11.6 Mac mini(M1, 2020) 運行環境僅供參考基本程式碼解析Twitch機器人本身定位為互動機器人，可已在偵測到指定內容後說出特定內容，亦或者是在一定固定時間間隔說重複的內容。首先來解析在Twitch Bot 圖奇機器人(1)中有用到的程式碼：client.on('message', (channel, tags, message, self) =&gt; { if(self) return; if(message.toLowerCase() === '!hello') { client.say(channel, `@${tags.username}, heya!`); }});client.on() 代表開始執行程式碼的意思，所以我們會用到的比對程式碼都需要放在 client.on()裡面。client.say() 機器人執行說話指令的程式碼。介紹一下這段程式碼中所提到的參數： message : 在聊天室中所偵測到的任何話 channel : 所加入的聊天室 tags : 說那句話的使用者相關資料 self : 機器人帳號本身所以我們要比對的話就需要從 message 裡去尋找有沒有特定的字眼。至於尋找指定內容有兩種方法語法可以使用，一種為完全相同、一種為包含特定內容。完全比對完全比對 === 以上面原本提到的程式碼例子： if(message.toLowerCase() === '!hello') { client.say(channel, `@${tags.username}, heya!`); }首先將偵測到的 message 轉換成小寫 .toLowerCase()，如果完全等於 !hello 機器人就會在聊天室說 @說話者, heya! 這代表如果我們說： 1!hello 或 !helloo 機器人是「不會回應」的！包含即可包含即可 .includes() 首先提供一段範例程式碼 if (message.includes(\"!有驚無險\")) { let date = new Date(new Date().toLocaleString(\"TW\", { timeZone: \"Asia/Taipei\" })); client.say(channel, `@${chanName} 有驚無險，又到${date.getHours()}點 GivePLZ`); }這邊則沒有將偵測到的 message 轉換成大小寫(因為都是中文)，如果說的話中包含 !有驚無險 機器人則會在聊天室說 @說話者 有驚無險，又到XX點 GivePLZ(這邊可以加入一些免費的貼圖使用 XD)這代表如果我們說： 1!有驚無險 或 !有驚無險 ResidentSleeper 機器人是「會回應」的！固定間隔說話固定間隔說話則會用到 setInterval() 首先提供一段範例程式碼 setInterval(() =&gt; { client.say(channel,`nlnlOeO`); }, 1000);將這段程式碼放到 client.on() 中就可以，在 { } 中是你要說的話，在這邊我就是放入 client.say(channel, 'nlnlOeO' ，然後結尾的 1000 代表 1000毫秒 (1000毫秒 ＝ 1秒)，可以自行設定時間間隔。這代表機器人會每間隔 1秒 說出 nlnlOeO機器人防止被Ban既然都介紹到 setInterval 了，那就順便介紹 setTimeout() ，在第一回的時候有講到Twitch有限制機器人在30秒內只能說20句話，如果說太多可能會導致機器人在聊天室「被消失」(Log中看得到機器人說話，但在聊天室沒有出現)，所以就需要用到 setTimeout() 的方式去避免機器人在30秒內說出過20句話。範例程式碼如下：const tmi = require('tmi.js');// 設定一個全域變數let canDo = true;const client = new tmi.Client({ options: { debug: true }, identity: { username: 'username', password: 'password' }, channels: [ 'channels' ]});client.connect();client.on('message', (channel, tags, message, self) =&gt; { if(self) return; if (message.includes(\"!有驚無險\") &amp;&amp; canDo) { let date = new Date(new Date().toLocaleString(\"TW\", { timeZone: \"Asia/Taipei\" })); client.say(channel, `@${chanName} 有驚無險，又到${date.getHours()}點 GivePLZ`); canDo = false; setTimeout(function () {canDo = true;}, 2000); }});首先要設定一個全域變數，這邊所設定的名稱是 let canDo = true ，當偵測到指定字並且 canDo 是 true 時才會執行程式碼。setTimeout() 的寫法就如同範例程式法所示，結尾的 2000 跟 setInterval() 一樣為2秒的意思。整體執行流程像下面表示： 偵測到指定字眼並且 canDo == true 機器人說出指定內容 將 canDo = false 執行 setTimeout(function() {cando = true;}, 2000);所以當加入這幾段程式碼後，機器人在30秒內最多只會說15句話，就可以避免被Twitch消失的狀況。(建議不要把時間設定的太緊，因為網路、計時器都可能會影響到機器人說話，留一些彈性時間給機器人)基本上到這邊你應該就能獨立寫出一串完全比對或包含的程式碼了，你已經可以完成你的客製化機器人了！" }, { "title": "Twitch Bot 圖奇機器人(1)", "url": "/posts/TwitchBot/", "categories": "Twith Bot", "tags": "node.js, twitch bot, javascript", "date": "2022-05-04 21:28:00 +0800", "snippet": "需備知識、工具 Visual Studio Code node.js Javascript 基本語法運行環境： MacOs Big Sur 11.6 Mac mini(M1, 2020)環境安裝Twitch 本身也有機器人建立教學。Twitch 提供一個 IRC 通道，讓機器人可以透過 WebSocket 或 TCP 的方式連到 Twitch，連線後機器人可以在聊天室接收、發送訊息，可以偵測某些特定字說某些話，或者排程說話之類的簡易操作。 首先是 node.js 的安裝，這邊亦有兩種方式。 確定自己不會在用到 node.js，則可以到 node.js 官方網站選擇LTS版本安裝。 可能會利用到不同的 node.js 版本則推薦用 nvm 去進行 node.js 的版控，nvm安裝教學看這邊 在安裝好後可用 node -v 檢查是否安裝成功，如果安裝成功則會跳出版本號碼，我這邊安裝的是 v14.17.1 node -v 用建立新資料夾，用 VS Code 開啟該資料夾，新增檔案命名為 bot.js。在 VS Code 的 Ternimal中輸入 npm i tmi.js 安裝 tmi.js 套件（用來連接 Twitch IRC) npm i tmi.js 接著可以參考 tmi.js 所提供的範例程式碼，將他複製貼上到剛新增的 bot.js 裡頭，程式碼如下所示。const tmi = require('tmi.js');const client = new tmi.Client({ options: { debug: true }, identity: { username: 'my_bot_name', password: 'oauth:my_bot_token' }, channels: [ 'my_name' ]});client.connect();client.on('message', (channel, tags, message, self) =&gt; { // Ignore echoed messages. if(self) return; if(message.toLowerCase() === '!hello') { // \"@alca, heya!\" client.say(channel, `@${tags.username}, heya!`); }}); 其中有三個地方的值需要進行修改 username : my_bot_name 請修改成你要用的機器人帳號的英文ID，假設帳號為 卡北齊(shawno439) 那我其中該輸入的就為 shawno439 password: oauth:my_bot_token 可利用這個 網站 取得你的 Twitch Oauth，將其複製貼上，OAUTH格式應該為 oauth:XXXXXXXXXXXXXX channels: [ my_name ] 這邊則是填入要加入的聊天室名稱，要注意有些聊天室有需要追蹤一定時間才可說話的規定。（建議在第一次執行或是測試功能時皆在自己的Twitch頻道，比較不會打擾到人也不會遇到擋重複留言的問題呦！） 當以上都調整完時，在 Ternimal 輸入 node bot.js 執行程式碼。 node bot.js 最終顯示 [22:18] info: Joined #XXXXXX 代表機器人已經成功加入該聊天室了。這時候可以到設定的 Twitch聊天室輸入 !hello，機器人會回答 heya!最終建立Twitch的第一步就完成了，後續會再分享一些可能會用到的 JavaScript 語法以及連接 Twitch API 的方法。" }, { "title": "搭建 GitHubPage", "url": "/posts/build_GitHubPage/", "categories": "GitHub Page", "tags": "Github Page, Jekyll, Chirpy", "date": "2022-05-03 20:49:00 +0800", "snippet": "需備知識 Github操作 CMD基本操作 MarkDown基本操作 Visual Studio Code系統環境為 Windows11 21H2（環境僅供參考，如同為Windows系統，操作應該大同小異）Github Page , Jekyll我所選用的模板是 Chirpy Jekyll Theme，在其 Github 下面有詳細的操作流程，但這邊還是分享自己的流程以供參考。因為搭建 Github Page 是基於 Jekyll，所以要先至Jkeyll.com參考環境安裝流程。 安裝Ruby，最方便快捷的是到RubyInstaller for Windows 需安裝 RubyInstaller-2.4 以上的版本 下載並安裝 Ruby + Devkit(默認安裝就可以，無腦NEXT XD) 開啟 CMD 輸入 ruby -v ，檢查是否正確安裝 Ruby，這邊我安裝的版本是 Ruby 3.1.2p20 ruby -v 在 CMD 輸入 ridk install，一樣選擇 base 版本(1 - MSYS2 base installation)即可 ridk install 重開一個 CMD 以便安裝 Jekyll 在適合的位置 gem install jekyll bundler 最後輸入 jekyll -v 檢查是否順利安裝 Jekyll ， 這邊我安裝的版本是 jekyll 4.2.2 jekyll -v 到 Chirpy Starte 產生自己的專案，專案名稱(Repository name)命名為 &lt;username&gt;.github.io (username 是你的使用者名稱) 將專案下載到你的電腦本機上，這邊我使用的是 Github Desktop。 在執行專案之前，需要先安裝 Dependencies，打開 CMD 輸入 bundle。 bundle 接著使用VS Code打開該專案。在下方 TERMINAL 輸入 bundle exec jekylls bundle exec jekyll s 最後可以打開在 Local 端的 Page 127.0.0.1:4000，以判斷是否執行成功。 如果 _posts 裡有.md檔，可能導致執行失敗。 基本上到這邊環境都已經架設好了，接下來就是上傳到Github上面。部署至 Github 上首先修改 _config.yml 裡的幾個項目，順便貼上自己的設定以供參考： lang：zh-TW（我自行修改繁體中文版本，需要放至 _data/_locales 裡） timezone: Asia/Taipei title: XXX Blog url: ‘https://&lt;username&gt;.github.io’ github username: &lt;username&gt; social name: &lt;your name&gt; social email: &lt;your email&gt; social links: https://github.com/&lt;username&gt; avatar: /assets/img/sticker.jpg 選一個大頭貼放至 /assets/img 裡如果你所使用的電腦版本為 Windows，需先一樣用 VS Code 開啟專案調整 Gemfile 系統版本，在Terminal輸入： bundle lock --add-platform x86_64-linux接著就可以用 Github Desktop 提交修改，並 Push 上 Github ，可以用網頁打開你的專案到 Actions 檢視 Build 情況。如果沒有出現任何Error，則可以在 &lt;username&gt;.github.io，檢視自己上傳的網頁。開始撰寫文章上傳成功後，則可以開始撰寫自己的Github文章囉！首先一樣用 VS Code 打開你的專案，找到 _posts 資料夾得位置，文章的格式為MD檔(MarkDown)有兩種方式可以新增檔案。 在 _posts 右鍵新增檔案，在最後檔案需加上 .md 後綴 使用我上傳的 範例檔案但需要注意要加上標頭以便模板辨識標題、作者等資訊。專案在命名規則時請按照西元年-月-日-網頁名稱.md，就以這篇文章為例其命名為2022-05-03-build_GitHubPage.md。在命名上傳檔案後，盡量不要不要再修改檔案名稱，可能會導致找不到原先的網頁。" } ]
